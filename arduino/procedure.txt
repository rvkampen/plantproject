Goal:
To have an interactive system that automatically waters the plants from a manually filled bucket. 

Requirements:
- Gather the temperature, humidity & air pressure of the room every minute.
- Gather the temperature & humidity of the plants every minute.
- Water the enabled plants once a day (around 8:00), if their humidity is less than the preset as configurable trough the website.
- Alert if the main bucket is empty.
- Display browsable graphs of the temperature, humidity & air pressure measurements (room & plants) on the website.
- Display when the plants have been watered on the website.
- Allow a preset wanted humidity per plant trough the website.
- Allow to enable/disable watering individual plants trough the website.
- Automatically disable a plant in case of a leak and send an email or push alert trough the website.
- The system should only stop operating when the buckets are empty or all enabled plants are leaking, but not when the website is unreachable.
  (The internet connection quality can be improved here).
2nd Watering should take place from multiple buckets, one main bucket should be filled, multiple slave buckets can be configured trough the website.
2nd Water should be automatically distributed from main to slave bucket when needed.

Notes:
- Leakage should be kept at a minimum, so if the water from the bucket is not arriving at the plant it should be marked as leaking.
  Because the hose length will differ from between plants the allowed timeout needs to be configurable per plant.
- Watering should take place from a main bucket because using the main water can ruin the relations with neighbours in case of failure.
  If this differs in future applications, the system should be configurable that the 'main bucket' can be replaced by a solenoid that fills the 'slave bucket(s)'.
- The Arduino should be able to store data temporarily in case the website is unreachable and re-post it later when its available again. 
- The Arduino/electronics should not be affected in any way by the water, only the pumps should have contact with the water.
- If the server is unreachable when the plants should be watered, retry every 5 minutes, after failure for more than a hour water the plants anyway.
- The backend should allow multiple instances (to allow testing and/or different rooms).
- The system should at intervals of a few days sync its time to an NTP server (basic NTP will break down February 7, 2036, it's ok with me if it no longer works after that date).

Design:
Arduino memory:
hardcoded configuration:
- system serial number       uint8,  To distinguish between setups, 0 is reserved for testing purposes.
- website host name          string,
- website host port          int16,  usually 80
- ntp host name              string,
- I2C adresses of sensors/clock
- meaning of I/O pins

general:
- position indication x 16 *  Enum
 0 = nothing connected,
 1 = plant,
 2 = bucket,
 3 = reserved
- last_NTP_time              uint32, Last time in seconds since epoch that the clock was synced to NTP.
- last_server_config_time    uint32, Last time in seconds since epoch that the server configuration has been changed.
- last_environmental_time    uint32, Last time in seconds since epoch that the environmentals have been measured.
- watering_enabled        *  bool,   If the system is allowed to water the plants.
- watering_starttime      *  uint17, Seconds since midnight that the watering might take place after.
- last_water_time            uint32, Last time in seconds since epoch that the watering cycle has taken place.

each plant:
- available               *  bool,   True if a plant is connected at this spot.
- minimum_humidity        *  uint10, Minimum humidity, when the humidity is still higher watering is not allowed.
- max_hose_fill_time      *  uint16, Maximum amount of centiseconds that it might take to fill the hose to this plant (max ~11 minutes).
- maximum_pump_time       *  uint16, Maximum amount of centiseconds pump might be on after max_hose_fill_time, determines maximum amount of water given in a single shot (max ~11 minutes).
- loose                   ** bool,   If this plant has had failed filling attempts.
- loose_comunicated          bool,   If the server has succesfully been told that this plant is leaking.
- bucket_index            *  uint4,  Index of the bucket, so eye can be kept on bucket contents when watering.

each bucket:
- parent_bucket_index     *  int5,   The bucket to get water from when this one is empty, -1 if there is no parent or filling is disabled. 
- max_hose_fill_time      *  uint16, Maximum amount of centiseconds that it might take to fill the hose to this bucket (max ~11 minutes).
- maximum_pump_time       *  uint16, Maximum amount of centiseconds pump might be on after max_hose_fill_time, determines maximum amount of water transfered to this bucket in a single shot (max ~11 minutes).
- loose                   ** bool,   If this bucket has had failed filling attempts.
- loose_comunicated          bool,   If the server has succesfully been told that this bucket is not filling.
- empty                   ** bool,   If this bucket has no parents and/or cannot be filled automatically, might reset automatically if full sensor senses water again.
- empty_comunicated          bool,   If the server has succesfully been told that this bucket needs to be filled manually.

*  Server dictated setting.
** Resetable by server.

DECISIONPOINTS:
- bucket sensors, multiple resistors?, 
  empty indication (just above pumps minumum),
  full indication,
  level indication?

bucket:
- last low sensor value + last change time
- last empty sensor value + last change time

general:
- start_time
- first_loop
- never_watered
- hygro value(s)
- temp value(s)
- last_time
- fill_state (measure_only / ok / fail_no_water)
- watered_today // only water once a day

----------------------------------------------

init:
- first_loop = true
- never_watered = true
- watered_today = false
- reset plant/bucket/general data
- set start_time

---------------------------------------------

loop:
- get time from clock
- clock_fail = time <= last_time || time < start_time
- if(!clock_fail) last_time = time
- measure hygro sensor and update sensor values
- update top display line // see display description below

-- if first loop
--- fill_state = measure_only
-- else if (time > 8:15 && !watered_today || never_watered) && !clock fail // so usually 8:30 if scheduling is working
--- watered_today = true
--- never_watered = false
--- fillstate = ok
--- set cursor on bottom display line
-- else 
--- watered_today = time < 8:15
--- fillstate = measure_only

- measure bucket
-- select 16
-- read sensor low
-- read sensor empty
-- if empty fillstate = fail_no_water
-- update display

- foreach plant
-- select x
-- measure sensor
-- if fillstate == ok
--- if sensor value < minimum_humidity && plant state == ok
---- enable pump
---- read hose_end_sensor
---- while !hose_end_sensor sleep .1 sec untill max_hose_fill_time
---- if still not hose_end_sensor plant state = loose
---- else wait maximum_pump_time
---- disable pump
---- measure sensor
---- if plant level == same level - plant state = fail_sensor
---- plant x watered = true
-- update plant state
-- update display character

---- measure bucket
----- select 16
----- read sensor low
----- read sensor empty
----- if empty fillstate = fail_no_water

- disable cursor on display
- update storage
-- if fail update display
- post result on telnet
- post state to server (plants + bucket + hygro + which watered)
-- if fail update display & retry 5 times (minute in between)

- if first loop 
-- sleep 5 minutes
- else
-- sleep till next half hour mark

----------------------------------

Display
1234567890123456
00:00 IS 99% 22C
W---T----D---  !
last time loop (FAIL! if clock failed), I if internet fail, S if storage fail, hygro, temp
Plant state:
W = watered
L = loose
0 = never watered, program started today
1-9 = number of days since last watered
* = more than 9 days
T = watered today + dried out after (thirsty)
D = Drying (not watered today)
! = loose for more than a day
' ' = no plant at this spot
> = Filling hose
P = Pumping

Bucket state
^ = both ok
W = warning - low but not empty
F = empty but not low (fail)
! = low and empty (refill needed)


----------------------------

- kill switch? -> measure only for a easy morning?
- backlight switch?